/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.ManageTheBusiness;

import MarketAnalytics.AnalysisHelper;
import TheBusiness.Business.Business;
import TheBusiness.MarketModel.Market;
import TheBusiness.MarketModel.SolutionOffer;
import TheBusiness.ProductManagement.Product;
import TheBusiness.SalesManagement.SalesPersonProfile;
import TheBusiness.Supplier.Supplier;
import UserInterface.Main.WorkSpaceProfiles.MarketingManagerWorkAreaJPanel1;
import java.awt.Color;
import java.awt.Font;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
/**
 *
 * @author renuka
 */
public class PerformaceReportMarketingJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PerformaceReportMarketingJPanel
     */
     JPanel CardSequencePanel;
    Business business;
    Supplier selectedsupplier;
    Product selectedproduct;
    AnalysisHelper helper;
    SalesPersonProfile salesperson;


    public PerformaceReportMarketingJPanel(Business bz, JPanel jp, AnalysisHelper helper,SalesPersonProfile salesperson) {
        CardSequencePanel = jp;
        this.business = bz;
        this.helper = helper; // Initialize the helper object
        this.salesperson=salesperson;
        initComponents();
        

    }
   
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        btnTopSolutions = new javax.swing.JButton();
        btnTopCustomers = new javax.swing.JButton();
        btnMarginalRevenue = new javax.swing.JButton();
        btnTopSales = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setBackground(new java.awt.Color(0, 153, 153));

        jButton1.setText("<Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Performance Report - Market");

        jSplitPane1.setDividerLocation(150);

        btnTopSolutions.setText("Top solutions");
        btnTopSolutions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTopSolutionsActionPerformed(evt);
            }
        });

        btnTopCustomers.setText("Top customers");
        btnTopCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTopCustomersActionPerformed(evt);
            }
        });

        btnMarginalRevenue.setText("Marginal revenue");
        btnMarginalRevenue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarginalRevenueActionPerformed(evt);
            }
        });

        btnTopSales.setText("Top Sales Persons");
        btnTopSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTopSalesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnTopCustomers, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTopSolutions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMarginalRevenue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(btnTopSales, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(btnTopSolutions)
                .addGap(28, 28, 28)
                .addComponent(btnTopCustomers)
                .addGap(29, 29, 29)
                .addComponent(btnTopSales)
                .addGap(28, 28, 28)
                .addComponent(btnMarginalRevenue)
                .addContainerGap(154, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 699, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 369, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(34, 34, 34)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 854, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(34, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 407, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(76, 76, 76))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(99, 99, 99)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(100, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     // TODO add your handling code here:
     MarketingManagerWorkAreaJPanel1 marketingManagerWorkArea = new MarketingManagerWorkAreaJPanel1(business, CardSequencePanel);

    // Remove the current panel and show the previous panel
    CardSequencePanel.removeAll();
    CardSequencePanel.add("MarketingManagerWorkArea", marketingManagerWorkArea);
    ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnTopSolutionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTopSolutionsActionPerformed
        CategoryDataset dataset = createSalesDataset();

    // Create chart based on the dataset
    JFreeChart chart = ChartFactory.createBarChart(
            "Top 3 Best Sales People",     // Chart title
            "Sales",             // X-axis label
            "Number of orders sold above target price",    // Y-axis label
            dataset);
    customizeBarChart(chart);

    // Display the chart in a frame
    ChartFrame frame = new ChartFrame("Results", chart);
    frame.pack();
    frame.setVisible(true);
    }//GEN-LAST:event_btnTopSolutionsActionPerformed

    private void btnTopCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTopCustomersActionPerformed
        // TODO add your handling code here:

      CategoryDataset dataset = createCustomersDataset();

        //Create chart based on the dataset
        JFreeChart chart = ChartFactory.createBarChart(
                "Top 3 best customers",     // Chart title
                "Customers",             // X-axis label
                "Number of orders bought above target price",    // Y-axis label
                dataset);
        customizeBarChart(chart);
        
        ChartFrame frame = new ChartFrame("Results", chart);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_btnTopCustomersActionPerformed

    private void btnMarginalRevenueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarginalRevenueActionPerformed
        // TODO add your handling code here:
        CategoryDataset dataset = createMarginDataset();

        // Create chart based on the dataset
        JFreeChart chart = ChartFactory.createBarChart(
                "Total marginal revenue broken down by market",     // Chart title
                "Market",             // X-axis label
                "Margin over the orders based on Marktet",    // Y-axis label
                dataset);
        customizeBarChart(chart);
        
        ChartFrame frame = new ChartFrame("Results", chart);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_btnMarginalRevenueActionPerformed

    private void btnTopSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTopSalesActionPerformed
        // TODO add your handling code here:
     CategoryDataset dataset = createSalesDataset();

     // Create chart based on the dataset
     JFreeChart chart = ChartFactory.createBarChart(
             "Top 3 Best Sales People",     // Chart title
             "Sales",             // X-axis label
             "Number of orders sold above target price",    // Y-axis label
             dataset);

     // Display the chart in a frame
     ChartFrame frame = new ChartFrame("Results", chart);
     frame.pack();
     frame.setVisible(true);
    }//GEN-LAST:event_btnTopSalesActionPerformed
 


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMarginalRevenue;
    private javax.swing.JButton btnTopCustomers;
    private javax.swing.JButton btnTopSales;
    private javax.swing.JButton btnTopSolutions;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
    
     private PieDataset createNegotiatedSolutionsDataset() {
        DefaultPieDataset dataset = new DefaultPieDataset();
        HashMap<SolutionOffer, Integer> best_solution_offers = helper.getBestSolutionOffers(business, false);
        List<Map.Entry<SolutionOffer, Integer>> sortedEntries = helper.sortSolutionOffersByMargin(best_solution_offers);
        
        int topCount = 3;
        for (int i = sortedEntries.size() - 1; i >= 0 && topCount > 0; i--, topCount--) {
            Map.Entry<SolutionOffer, Integer> entry = sortedEntries.get(i);
            SolutionOffer s = entry.getKey();
            int value = entry.getValue();
            // Add data to the dataset
            dataset.setValue(s.getMarketchannelcomb().getMarket().getName()+"_"+s.getMarketchannelcomb().getChannel().getChannelType()+"_"+s.getProduct().getName(), value);
            // System.out.println("Market: "+s.getMarketchannelcomb().getMarket().getName() + "\tChannel: "+ s.getMarketchannelcomb().getChannel().getChannelType() + "\tSolution_price: " + s.getPrice() + "\tProduct_name: " + s.getProduct().getName() + "\tMargin: "+value);
        }

        return (PieDataset) dataset;
    }
    
    private CategoryDataset createCustomersDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    HashMap<String, Integer> best_customers = helper.getBestCustomers(business, false);
        // Sort the HashMap by values
        List<Map.Entry<String, Integer>> sortedEntries = helper.sortByValues(best_customers);

        // Display the sorted entries
        int topCount = 3;
        for (int i = sortedEntries.size() - 1; i >= 0 && topCount > 0; i--, topCount--) {
            Map.Entry<String, Integer> entry = sortedEntries.get(i);
            String customer_name = entry.getKey();
            int value = entry.getValue();
            dataset.addValue(value, "Best Customer", customer_name);
        }
        
        return (CategoryDataset) dataset;
    }
    
    private CategoryDataset createSalesDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        HashMap<String, Integer> best_sales_people = helper.getBestSalesPeople(business, false);
        // Sort the HashMap by values
        List<Map.Entry<String, Integer>> sortedEntries = helper.sortByValues(best_sales_people);

        // Display the sorted entries
        int topCount = 3;
        for (int i = sortedEntries.size() - 1; i >= 0 && topCount > 0; i--, topCount--) {
            Map.Entry<String, Integer> entry = sortedEntries.get(i);
            String customer_name = entry.getKey();
            int value = entry.getValue();
            dataset.addValue(value, "Best Sales Person", customer_name);
        }
        
        return (CategoryDataset) dataset;
    }
    
    public JFreeChart createChart( PieDataset dataset, String heading ) {
      JFreeChart chart = ChartFactory.createPieChart(
         heading,   // chart title 
         dataset,          // data ChartFactory   
         true,             // include legend   
         true, 
         false);

      return chart;
    }

    private void customizeBarChart(JFreeChart chart) {
        // Bar chart styling
        chart.setBackgroundPaint(Color.white);
        CategoryPlot plot = chart.getCategoryPlot();
        CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45); // Rotate labels for better readability
        domainAxis.setTickLabelFont(new Font("SansSerif", Font.PLAIN, 12));
        chart.getLegend().setItemFont(new Font("SansSerif", Font.PLAIN, 12));
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        // Set maximum bar width in data units
        renderer.setMaximumBarWidth(0.1);
    }
    
    private CategoryDataset createMarginDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        HashMap<Market, Integer> margin_by_market = helper.totalMarginalRevenueByMarket(business, false);
        Iterator<Map.Entry<Market, Integer>> iterator = margin_by_market.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<Market, Integer> entry = iterator.next();
            Market m = entry.getKey();
            int value = entry.getValue();
            dataset.addValue(value, "Market_Margin", m.getName());
        }
        
        return (CategoryDataset) dataset;
    }
        
}
