/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.ManageTheBusiness;

import TheBusiness.Business.Business;
import TheBusiness.MarketModel.Market;
import TheBusiness.ProductManagement.Product;
import TheBusiness.Supplier.Supplier;
import UserInterface.Main.WorkSpaceProfiles.MarketingManagerWorkAreaJPanel1;
import java.util.Iterator;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author renuka
 */
public class ManageMarketsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageMarketsJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    Supplier selectedsupplier;
    Product selectedproduct;

    public ManageMarketsJPanel(Business bz, JPanel jp) {
        CardSequencePanel = jp;
        this.business = bz;
        initComponents();
        populateMarketTable();

    }
   
  private void populateMarketTable() {
    DefaultTableModel model = (DefaultTableModel) marketTable.getModel();
    model.setRowCount(0);

    for (Market mainMarket : business.getMarketCatalog().getMarkets()) {
        System.out.println("Market: " + mainMarket.getName() + ", Characteristics: " + mainMarket.getCharacteristics());

        Object[] rowData = { mainMarket.getName(), mainMarket.getCharacteristics() };
        model.addRow(rowData);
    }
}




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        marketTable = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtMarketName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCharacterstics = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 153, 153));

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setText("Manage Markets");

        marketTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Market Name", "Characteristics"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(marketTable);
        if (marketTable.getColumnModel().getColumnCount() > 0) {
            marketTable.getColumnModel().getColumn(0).setResizable(false);
            marketTable.getColumnModel().getColumn(1).setResizable(false);
        }

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Market Name");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Characterstics");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 39, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addComponent(btnBack)
                        .addGap(47, 47, 47)
                        .addComponent(btnView)
                        .addGap(30, 30, 30)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(218, 218, 218)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtMarketName, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCharacterstics)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtMarketName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCharacterstics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnView)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addContainerGap(127, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
         MarketingManagerWorkAreaJPanel1 marketingManagerWorkArea = new MarketingManagerWorkAreaJPanel1(business, CardSequencePanel);

        // Remove the current panel and show the previous panel
        CardSequencePanel.removeAll();
        CardSequencePanel.add("MarketingManagerWorkArea", marketingManagerWorkArea);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        // Get the selected row
        int selectedRow = marketTable.getSelectedRow();
    if (selectedRow >= 0) {
        // Retrieve updated data from text fields
        String updatedMarketName = txtMarketName.getText().trim();
        String updatedCharacteristics = txtCharacterstics.getText().trim();

        // Retrieve the original market name from the selected row (to find the market object)
        String originalMarketName = (String) marketTable.getValueAt(selectedRow, 0);

        // Find the market object in the business model
        for (Market market : business.getMarketCatalog().getMarkets()) {
            if (market.getName().equals(originalMarketName)) {
                // Update the market object with new values
                market.setName(updatedMarketName);
                market.setCharacteristics(updatedCharacteristics);
                break; // Exit loop after updating
            }
        }

        // Refresh the table to show updated data
        populateMarketTable();
    } else {
        showError("Please select a row to update.");
    }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
    int selectedRow = marketTable.getSelectedRow();
    
    // Check if a row is actually selected
    if (selectedRow >= 0) {
        // Retrieve market name and characteristics from the selected row
        String marketName = (String) marketTable.getValueAt(selectedRow, 0);
        String characteristics = (String) marketTable.getValueAt(selectedRow, 1);

        // Set the retrieved values to the text fields
        txtMarketName.setText(marketName);
        txtCharacterstics.setText(characteristics);
    } else {
        // Show an error message if no row is selected
        showError("Please select a row to view.");
    }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = marketTable.getSelectedRow();
    if (selectedRow >= 0) {
        // Retrieve the market name of the selected row
        String marketName = (String) marketTable.getValueAt(selectedRow, 0);

        // Remove the corresponding Market object from the business model
        Iterator<Market> iterator = business.getMarketCatalog().getMarkets().iterator();
        while (iterator.hasNext()) {
            Market market = iterator.next();
            if (market.getName().equals(marketName)) {
                iterator.remove(); // Remove the market
                break; // Exit the loop after removing the market
            }
        }

        // Remove the row from the table model
        DefaultTableModel model = (DefaultTableModel) marketTable.getModel();
        model.removeRow(selectedRow);

        // Print a message indicating the deletion
        System.out.println("Market deleted successfully: " + marketName);
    } else {
        // No row selected
        showError("Please select a row to delete.");
    }
    }//GEN-LAST:event_btnDeleteActionPerformed
    
    private void showError(String message) {
        // Use JOptionPane to show an error message dialog
        javax.swing.JOptionPane.showMessageDialog(this, message, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable marketTable;
    private javax.swing.JTextField txtCharacterstics;
    private javax.swing.JTextField txtMarketName;
    // End of variables declaration//GEN-END:variables
}
