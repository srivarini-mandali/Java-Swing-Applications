/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.ProductManagement;

import MarketAnalytics.AnalysisHelper;
import TheBusiness.Business.Business;
import TheBusiness.OrderManagement.Order;
import TheBusiness.OrderManagement.OrderItem;
import TheBusiness.ProductManagement.Product;
import TheBusiness.ProductManagement.ProductCatalog;
import TheBusiness.Supplier.Supplier;
import UserInterface.Main.WorkSpaceProfiles.BusinessManagerWorkAreaJPanel;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.ComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author renuka
 */
public class ManageCustomersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageCustomersJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    Supplier selectedsupplier;
    Product selectedproduct;
    AnalysisHelper helper;
    
    public ManageCustomersJPanel(Business bz, JPanel jp, AnalysisHelper helper) {
        CardSequencePanel = jp;
        this.business = bz;
        this.helper = helper;
        initComponents();
        populateCombo();
//        initializeTable();
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerOrdersTbl = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        customerCombo = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Customers");

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        customerOrdersTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Order id", "Product", "Actual price", "Quantity", "Market"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customerOrdersTbl.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(customerOrdersTbl);
        if (customerOrdersTbl.getColumnModel().getColumnCount() > 0) {
            customerOrdersTbl.getColumnModel().getColumn(0).setResizable(false);
            customerOrdersTbl.getColumnModel().getColumn(1).setResizable(false);
            customerOrdersTbl.getColumnModel().getColumn(2).setResizable(false);
            customerOrdersTbl.getColumnModel().getColumn(3).setResizable(false);
            customerOrdersTbl.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Customer");

        customerCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerComboActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Product");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(70, 777, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(4, 4, 4)
                .addComponent(customerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(58, 58, 58))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
      BusinessManagerWorkAreaJPanel businessManagerPanel = new BusinessManagerWorkAreaJPanel(business, CardSequencePanel, helper);

    // Remove the current panel and show the previous panel
    CardSequencePanel.removeAll();
    CardSequencePanel.add("BusinessManagerWorkArea", businessManagerPanel);
    ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void customerComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerComboActionPerformed
        refreshTable();        
    }//GEN-LAST:event_customerComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox<String> customerCombo;
    private javax.swing.JTable customerOrdersTbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void refreshTable() {
        int rc = customerOrdersTbl.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) customerOrdersTbl.getModel()).removeRow(i);
        }

        String customername = (String) customerCombo.getSelectedItem();
        ArrayList<Order> orderlist = business.getMasterorderlist().getOrders();

        if (orderlist.isEmpty()) {
            return;
        }
        
        for (Order o : orderlist) {
            for(OrderItem oi: o.getOrderitems()){
                if(o.getCustomer().getCustomerId().equals(customername)){
                    Object[] row = new Object[5];
                    row[0] = o.getOrder_id();
                    row[1] = oi.getSelectedProduct().getName();
                    row[2] = oi.getActualPrice();
                    row[3] = oi.getQuantity();
                    row[4] = o.getMarket().getName();
                    ((DefaultTableModel) customerOrdersTbl.getModel()).addRow(row);
                }
                
            }
            
        }
        
    }

    private void initializeTable() {
        ArrayList<Order> orderlist = business.getMasterorderlist().getOrders();
                
        String customername = (String) customerCombo.getSelectedItem();
        for (Order o : orderlist) {
            for(OrderItem oi: o.getOrderitems()){
                if(o.getCustomer().getCustomerId().equals(customername)){
                    Object[] row = new Object[5];
                    row[0] = o.getOrder_id();
                    row[1] = oi.getSelectedProduct().getName();
                    row[2] = oi.getActualPrice();
                    row[3] = oi.getQuantity();
                    row[4] = o.getMarket().getName();
                    ((DefaultTableModel) customerOrdersTbl.getModel()).addRow(row);
                }
            }
            
        }
    }

    private boolean isItemInComboBox(JComboBox<String> customerCombo, String item) {
        ComboBoxModel<?> model = customerCombo.getModel();
        for (int i = 0; i < model.getSize(); i++) {
            if (model.getElementAt(i).equals(item)) {
                return true;
            }
        }
        return false;
    }

    private void populateCombo() {
        customerCombo.removeAllItems();

        int rc = customerOrdersTbl.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) customerOrdersTbl.getModel()).removeRow(i);
        }

        ArrayList<Order> orderlist = business.getMasterorderlist().getOrders();

        if (orderlist.isEmpty()) {
            return;
        }
        for (Order o : orderlist) {
            // if customer not in combo box, add customer
            if (!isItemInComboBox(customerCombo, o.getCustomer().getCustomerId())) {
                customerCombo.addItem(o.getCustomer().getCustomerId());
            }         
        }
    }
}
