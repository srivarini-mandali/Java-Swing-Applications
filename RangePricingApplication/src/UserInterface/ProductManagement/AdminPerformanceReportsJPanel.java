/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.ProductManagement;

import TheBusiness.Business.Business;
import TheBusiness.ProductManagement.Product;
import TheBusiness.Supplier.Supplier;
import UserInterface.Main.WorkSpaceProfiles.BusinessManagerWorkAreaJPanel;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import MarketAnalytics.AnalysisHelper;
import TheBusiness.MarketModel.Market;
import TheBusiness.MarketModel.SolutionOffer;
import java.awt.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
/**
 *
 * @author renuka
 */
public class AdminPerformanceReportsJPanel extends javax.swing.JPanel {

    JPanel CardSequencePanel;
    Supplier selectedsupplier;
    Product selectedproduct;
    Business business;
    AnalysisHelper helper;
    
    public AdminPerformanceReportsJPanel(Business bz, JPanel jp, AnalysisHelper helper) {
        CardSequencePanel = jp;
        this.business = bz;
        this.helper = helper;
        initComponents();
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        negotiatedSolutionsBtn = new javax.swing.JButton();
        bestCustBtn = new javax.swing.JButton();
        bestSalesBtn = new javax.swing.JButton();
        marginRevenueBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 481, -1, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Performance reports");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 64, 916, 48));

        negotiatedSolutionsBtn.setText("<html>Top 3 best negotiated solutions</html>");
        negotiatedSolutionsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negotiatedSolutionsBtnActionPerformed(evt);
            }
        });
        add(negotiatedSolutionsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(103, 223, 146, 55));

        bestCustBtn.setText("<html>Top 3 best customers</html>");
        bestCustBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bestCustBtnActionPerformed(evt);
            }
        });
        add(bestCustBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 223, 146, 55));

        bestSalesBtn.setText("<html>Top 3 best sales people</html>");
        bestSalesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bestSalesBtnActionPerformed(evt);
            }
        });
        add(bestSalesBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(485, 223, 145, 55));

        marginRevenueBtn.setText("Marginal revenue");
        marginRevenueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marginRevenueBtnActionPerformed(evt);
            }
        });
        add(marginRevenueBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(673, 223, 146, 55));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
    // TODO add your handling code here:
     BusinessManagerWorkAreaJPanel businessManagerPanel = new BusinessManagerWorkAreaJPanel(business, CardSequencePanel, helper);

    // Remove the current panel and show the previous panel
    CardSequencePanel.removeAll();
    CardSequencePanel.add("BusinessManagerWorkArea", businessManagerPanel);
    ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void negotiatedSolutionsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negotiatedSolutionsBtnActionPerformed
        JFreeChart chart = createChart(createNegotiatedSolutionsDataset(), "Top 3 best negotiated solutions");
        ChartFrame frame = new ChartFrame("Results", chart);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_negotiatedSolutionsBtnActionPerformed

    private void marginRevenueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marginRevenueBtnActionPerformed
        CategoryDataset dataset = createMarginDataset();

        // Create chart based on the dataset
        JFreeChart chart = ChartFactory.createBarChart(
                "Total marginal revenue broken down by market",     // Chart title
                "Market",             // X-axis label
                "Margin over the orders based on Marktet",    // Y-axis label
                dataset);
        customizeBarChart(chart);
        
        ChartFrame frame = new ChartFrame("Results", chart);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_marginRevenueBtnActionPerformed

    private void bestCustBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bestCustBtnActionPerformed
        CategoryDataset dataset = createCustomersDataset();

        // Create chart based on the dataset
        JFreeChart chart = ChartFactory.createBarChart(
                "Top 3 best customers",     // Chart title
                "Customers",             // X-axis label
                "Number of orders bought above target price",    // Y-axis label
                dataset);
        customizeBarChart(chart);
        
        ChartFrame frame = new ChartFrame("Results", chart);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_bestCustBtnActionPerformed

    private void bestSalesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bestSalesBtnActionPerformed
        CategoryDataset dataset = createSalesDataset();

        // Create chart based on the dataset
        JFreeChart chart = ChartFactory.createBarChart(
                "Top 3 Best Sales People",     // Chart title
                "Sales",             // X-axis label
                "Number of orders sold above target price",    // Y-axis label
                dataset);
        customizeBarChart(chart);
        
        ChartFrame frame = new ChartFrame("Results", chart);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_bestSalesBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bestCustBtn;
    private javax.swing.JButton bestSalesBtn;
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton marginRevenueBtn;
    private javax.swing.JButton negotiatedSolutionsBtn;
    // End of variables declaration//GEN-END:variables
    
    private PieDataset createNegotiatedSolutionsDataset() {
        DefaultPieDataset dataset = new DefaultPieDataset();
        HashMap<SolutionOffer, Integer> best_solution_offers = helper.getBestSolutionOffers(business, false);
        List<Map.Entry<SolutionOffer, Integer>> sortedEntries = helper.sortSolutionOffersByMargin(best_solution_offers);
        
        int topCount = 3;
        for (int i = sortedEntries.size() - 1; i >= 0 && topCount > 0; i--, topCount--) {
            Map.Entry<SolutionOffer, Integer> entry = sortedEntries.get(i);
            SolutionOffer s = entry.getKey();
            int value = entry.getValue();
            // Add data to the dataset
            dataset.setValue(s.getMarketchannelcomb().getMarket().getName()+"_"+s.getMarketchannelcomb().getChannel().getChannelType()+"_"+s.getProduct().getName(), value);
            // System.out.println("Market: "+s.getMarketchannelcomb().getMarket().getName() + "\tChannel: "+ s.getMarketchannelcomb().getChannel().getChannelType() + "\tSolution_price: " + s.getPrice() + "\tProduct_name: " + s.getProduct().getName() + "\tMargin: "+value);
        }

        return (PieDataset) dataset;
    }
    
    private CategoryDataset createCustomersDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        HashMap<String, Integer> best_customers = helper.getBestCustomers(business, false);
        // Sort the HashMap by values
        List<Map.Entry<String, Integer>> sortedEntries = helper.sortByValues(best_customers);

        // Display the sorted entries
        int topCount = 3;
        for (int i = sortedEntries.size() - 1; i >= 0 && topCount > 0; i--, topCount--) {
            Map.Entry<String, Integer> entry = sortedEntries.get(i);
            String customer_name = entry.getKey();
            int value = entry.getValue();
            dataset.addValue(value, "Best Customer", customer_name);
        }
        
        return (CategoryDataset) dataset;
    }
    
    private CategoryDataset createSalesDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        HashMap<String, Integer> best_sales_people = helper.getBestSalesPeople(business, false);
        // Sort the HashMap by values
        List<Map.Entry<String, Integer>> sortedEntries = helper.sortByValues(best_sales_people);

        // Display the sorted entries
        int topCount = 3;
        for (int i = sortedEntries.size() - 1; i >= 0 && topCount > 0; i--, topCount--) {
            Map.Entry<String, Integer> entry = sortedEntries.get(i);
            String customer_name = entry.getKey();
            int value = entry.getValue();
            dataset.addValue(value, "Best Sales Person", customer_name);
        }
        
        return (CategoryDataset) dataset;
    }
    
    public JFreeChart createChart( PieDataset dataset, String heading ) {
      JFreeChart chart = ChartFactory.createPieChart(
         heading,   // chart title 
         dataset,          // data ChartFactory   
         true,             // include legend   
         true, 
         false);

      return chart;
    }

    private void customizeBarChart(JFreeChart chart) {
        // Bar chart styling
        chart.setBackgroundPaint(Color.white);
        CategoryPlot plot = chart.getCategoryPlot();
        CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45); // Rotate labels for better readability
        domainAxis.setTickLabelFont(new Font("SansSerif", Font.PLAIN, 12));
        chart.getLegend().setItemFont(new Font("SansSerif", Font.PLAIN, 12));
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        // Set maximum bar width in data units
        renderer.setMaximumBarWidth(0.1);
    }
    
    private CategoryDataset createMarginDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        HashMap<Market, Integer> margin_by_market = helper.totalMarginalRevenueByMarket(business, false);
        Iterator<Map.Entry<Market, Integer>> iterator = margin_by_market.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<Market, Integer> entry = iterator.next();
            Market m = entry.getKey();
            int value = entry.getValue();
            dataset.addValue(value, "Market_Margin", m.getName());
        }
        
        return (CategoryDataset) dataset;
    }
        
}
