/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Main.WorkSpaceProfiles.OrderManagement;

import TheBusiness.Business.Business;
import TheBusiness.CustomerManagement.CustomerDirectory;
import TheBusiness.CustomerManagement.CustomerProfile;
import TheBusiness.OrderManagement.MasterOrderList;
import TheBusiness.OrderManagement.Order;
import TheBusiness.ProductManagement.Product;
import TheBusiness.ProductManagement.ProductCatalog;
import TheBusiness.ProductManagement.ProductSummary;
import TheBusiness.SalesManagement.SalesPersonProfile;
import TheBusiness.Supplier.Supplier;
import UserInterface.Main.WorkSpaceProfiles.SalesPersonWorkAreaJPanel;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kal bugrara
 */
public class ProcessOrder extends javax.swing.JPanel {

    /**
     * Creates new form ManageSuppliersJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    Supplier selectedsupplier;
    Product selectedproduct;
    Order currentOrder;
    CustomerProfile customer;
    SalesPersonProfile salesperson;


    public ProcessOrder(Business business, SalesPersonProfile salesperson, JPanel CardSequencePanel) {
        initComponents();
        this.CardSequencePanel = CardSequencePanel;
        this.business = business;
        this.salesperson = salesperson;
        salesPersonTextField.setText(salesperson.getPerson().toString());
        System.out.println("Pro-order floor price: "+business.getProductcatalog().getProduct("Scanner Model B").getFloorPrice());
//        MasterOrderList mol = business.getMasterorderlist();

//        currentOrder =  mol.newOrder(customer, salesperson); //no order was made yet

        populateCustomerComboBox();
       
        initializeTable();
          // Add the TableModelListener to the OrderItemsTable
    }

    private void initializeTable() {

    cleanUpCombobox();
    cleanUpTable();

    // Load suppliers to the combobox
    ArrayList<Supplier> supplierlist = business.getSupplierDirectory().getSuplierList();
    
    if (supplierlist.isEmpty()) {
        System.out.println("No suppliers found");
        return;
    }

    for (Supplier s : supplierlist) {
        SuppliersComboBox.addItem(s.toString());
    }

    // Set the first supplier as selected by default
    if (!supplierlist.isEmpty()) {
        SuppliersComboBox.setSelectedIndex(0);
        updateSupplierCatalog();
    }
    }

    public void cleanUpCombobox() {
        //Clean the combobox for supplier choices

        SuppliersComboBox.removeAllItems();

    }

    public void cleanUpTable() {

        //Clean the product catalog table
        DefaultTableModel model = (DefaultTableModel) SupplierCatalogTable.getModel();
        model.setRowCount(0); 
    }
    public void cleanUpItemsTable() {

        //Clean the product catalog table
        int rc = OrderItemsTable.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) OrderItemsTable.getModel()).removeRow(i);
        }
    }

    public void refreshSupplierProductCatalogTable() {
         cleanUpTable();
 
//clear supplier table
        String suppliername = (String) SuppliersComboBox.getSelectedItem();
    selectedsupplier = business.getSupplierDirectory().findSupplier(suppliername);

    if (selectedsupplier == null) {
        return;
    }

    ProductCatalog pc = selectedsupplier.getProductCatalog();

    for (Product pt : pc.getProductList()) {
        Object[] row = new Object[4];
        row[0] = pt;
        row[1] = pt.getFloorPrice();
        row[2] = pt.getCeilingPrice();
        row[3] = pt.getTargetPrice();

        ((DefaultTableModel) SupplierCatalogTable.getModel()).addRow(row);
    }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnClear = new javax.swing.JButton();
        Next = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        SupplierCatalogTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        OrderItemsTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        SuppliersComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        salesPersonTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        productFrequencyBelowTargetTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        productFrequencyAboveTargetTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        productPricePerformanceTextField = new javax.swing.JTextField();
        productRevenueTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        productNameTextField = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        customerComboBox = new javax.swing.JComboBox<>();
        txtCommission = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        Back = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 520, 80, -1));

        Next.setText("Submit");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });
        add(Next, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 440, 80, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Suppliers");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 60, -1));

        SupplierCatalogTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Floor", "Ceiling", "Target"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SupplierCatalogTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SupplierCatalogTableMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                SupplierCatalogTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(SupplierCatalogTable);

        jScrollPane2.setViewportView(jScrollPane1);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 600, 110));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Prepare Order");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 550, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Product");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, 20));

        OrderItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Actual price", "Quanity", "Item total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        OrderItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                OrderItemsTableMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                OrderItemsTableMousePressed(evt);
            }
        });
        jScrollPane4.setViewportView(OrderItemsTable);

        jScrollPane3.setViewportView(jScrollPane4);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 600, 100));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Order Items");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, 20));

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddProductItemActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 130, 90, 30));

        SuppliersComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SuppliersComboBoxActionPerformed(evt);
            }
        });
        add(SuppliersComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 180, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Customer");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 50, 150, -1));

        salesPersonTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesPersonTextFieldActionPerformed(evt);
            }
        });
        add(salesPersonTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 70, 160, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Business-wide Product Intelligence", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14))); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setText("Frequency Below Target");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 50, 150, -1));
        jPanel1.add(productFrequencyBelowTargetTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 70, 150, -1));

        jLabel4.setText("Frequency Above Target");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 150, -1));

        productFrequencyAboveTargetTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productFrequencyAboveTargetTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(productFrequencyAboveTargetTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 70, 150, -1));

        jLabel7.setText("Marign around target");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 100, 150, -1));

        productPricePerformanceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productPricePerformanceTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(productPricePerformanceTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, 150, -1));

        productRevenueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productRevenueTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(productRevenueTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 150, -1));

        jLabel5.setText("Sales Revenues");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 110, -1));

        jLabel3.setText("Product name");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 110, -1));

        productNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productNameTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(productNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 150, -1));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, 600, 170));
        jPanel1.getAccessibleContext().setAccessibleName("Business -wide Product Intelligence");

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 560, 80, -1));

        add(customerComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 70, 160, -1));
        add(txtCommission, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 70, 140, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("My Commission");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 50, 150, 20));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Sales person");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 50, 150, 20));

        Back.setText("X Cancel");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });
        add(Back, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 480, 80, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) OrderItemsTable.getModel();
    model.setRowCount(0);
    }//GEN-LAST:event_btnClearActionPerformed

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
    // Get the selected customer's name from the combo box.
    String selectedCustomerName = (String) customerComboBox.getSelectedItem();
    CustomerProfile selectedCustomer = null;
    // Look for the selected customer in the customer directory.
    for (CustomerProfile cp : business.getCustomerDirectory().getCustomerList()) {
        if (cp.toString().equals(selectedCustomerName)) {
            selectedCustomer = cp;
            break;
        }
    }

    // If no customer is selected, show an error message.
    if (selectedCustomer == null) {
        JOptionPane.showMessageDialog(this, "No customer selected.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Get the commission entered in the txtCommission text field.
    String commissionText = txtCommission.getText();
    float commission = 0;
    try {
        // Parse the commission text to a float value.
        commission = Float.parseFloat(commissionText);
    } catch (NumberFormatException e) {
        // If the commission is not a valid float, show an error message.
        JOptionPane.showMessageDialog(this, "Invalid commission entered. Please enter a numeric value.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Get the master order list from the business object.
    MasterOrderList mol = business.getMasterorderlist();
    // Create a new order with the selected customer, salesperson, and commission.
    currentOrder = mol.newOrder(selectedCustomer, salesperson, commission); // The newOrder method needs to accept commission as an argument.

    // Update the current order with the selected customer.
    currentOrder.setCustomer(selectedCustomer);
    currentOrder.setSalesperson(salesperson);
    // Clear any previous items from the current order.
    currentOrder.getOrderitems().clear();

    // Get the model from the OrderItemsTable and add each item to the current order.
    DefaultTableModel model = (DefaultTableModel) OrderItemsTable.getModel();
    int numRows = model.getRowCount();
    for (int i = 0; i < numRows; i++) {
        Product product = (Product) model.getValueAt(i, 0);
        int actualPrice = (Integer) model.getValueAt(i, 1);
        int quantity = (Integer) model.getValueAt(i, 2);
        // Add a new order item to the current order.
        currentOrder.newOrderItem(product, actualPrice, quantity);
    }

    // Submit the current order.
    currentOrder.Submit(); // This method will likely change the order's status to "Submitted".

    // Show a confirmation message with the order number.
    JOptionPane.showMessageDialog(this, "Order #" + currentOrder.getModelNumber() + " has been successfully submitted.", "Order Submitted", JOptionPane.INFORMATION_MESSAGE);



    }//GEN-LAST:event_NextActionPerformed

    private void SupplierCatalogTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SupplierCatalogTableMousePressed
         int selectedRowIndex = SupplierCatalogTable.getSelectedRow();
            if (selectedRowIndex < 0) {
                return; // No row selected, exit the method
            }

            // Assuming the first column contains the Product object
            Product selectedProduct = (Product) SupplierCatalogTable.getValueAt(selectedRowIndex, 0);
            if (selectedProduct != null) {
                displaySelectedProductSummary(selectedProduct);
            } else {
                JOptionPane.showMessageDialog(null, "Invalid product selection.");
            }
    }//GEN-LAST:event_SupplierCatalogTableMousePressed

    private void productNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productNameTextFieldActionPerformed

    private void productRevenueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productRevenueTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productRevenueTextFieldActionPerformed

    private void productPricePerformanceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productPricePerformanceTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productPricePerformanceTextFieldActionPerformed

    private void SupplierCatalogTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SupplierCatalogTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_SupplierCatalogTableMouseEntered

    private void OrderItemsTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OrderItemsTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_OrderItemsTableMouseEntered

    private void OrderItemsTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OrderItemsTableMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_OrderItemsTableMousePressed

    private void AddProductItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddProductItemActionPerformed
        // TODO add your handling code here:
   int selectedRowIndex = SupplierCatalogTable.getSelectedRow();
    
    if (selectedRowIndex < 0) {
        JOptionPane.showMessageDialog(null, "Please select a product to add.");
        return;
    }

    selectedproduct = (Product) SupplierCatalogTable.getValueAt(selectedRowIndex, 0);
    if (selectedproduct == null) {
        JOptionPane.showMessageDialog(null, "Invalid product selection.");
        return;
    }

    DefaultTableModel orderItemsModel = (DefaultTableModel) OrderItemsTable.getModel();
    boolean productExists = false;
    
    // Search for the product in the order items
    for (int i = 0; i < orderItemsModel.getRowCount(); i++) {
        Product productInTable = (Product) orderItemsModel.getValueAt(i, 0);
        if (productInTable.equals(selectedproduct)) {
            int existingQuantity = (Integer) orderItemsModel.getValueAt(i, 2);
            orderItemsModel.setValueAt(existingQuantity + 1, i, 2); // Increment quantity
            orderItemsModel.setValueAt((existingQuantity + 1) * selectedproduct.getTargetPrice(), i, 3); // Update item total
            productExists = true;
            break;
        }
    }

    // If the product doesn't exist in the order, add it
    if (!productExists) {
        int actualPrice = selectedproduct.getTargetPrice(); // Here we're assuming the actual price is the target price
        int quantity = 1; // Starting with a quantity of 1

        orderItemsModel.addRow(new Object[]{
            selectedproduct,
            actualPrice,
            quantity,
            actualPrice * quantity // Item total
        });
    }
    }//GEN-LAST:event_AddProductItemActionPerformed

    private void SuppliersComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SuppliersComboBoxActionPerformed
        // TODO add your handling code here:
     refreshSupplierProductCatalogTable();
    }//GEN-LAST:event_SuppliersComboBoxActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        
       System.out.println("CardSequencePanel: " + CardSequencePanel);
     if (CardSequencePanel == null) {
         System.out.println("CardSequencePanel is null");
         return;
     }

     SalesPersonWorkAreaJPanel salesPersonWorkAreaPanel = new SalesPersonWorkAreaJPanel(business, salesperson, CardSequencePanel);

     CardSequencePanel.add("SalesPersonWorkAreaJPanel", salesPersonWorkAreaPanel);
     ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);


//    // Remove the current panel
//    CardSequencePanel.remove(this);
//
//    // Add the SalesPersonWorkAreaJPanel to CardSequencePanel
//    CardSequencePanel.add("SalesPersonWorkArea", salesPersonWorkAreaPanel);
//
//    // Switch to the SalesPersonWorkAreaJPanel in the CardSequencePanel
//    ((java.awt.CardLayout) CardSequencePanel.getLayout()).show(CardSequencePanel, "SalesPersonWorkArea");
    }//GEN-LAST:event_btnBackActionPerformed

    private void salesPersonTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesPersonTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salesPersonTextFieldActionPerformed

    private void productFrequencyAboveTargetTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productFrequencyAboveTargetTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productFrequencyAboveTargetTextFieldActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        if (currentOrder != null) {
        currentOrder.CancelOrder();
        JOptionPane.showMessageDialog(this, "Order #" + currentOrder.getModelNumber() + " has been cancelled.", "Order Cancelled", JOptionPane.INFORMATION_MESSAGE);
        }

       DefaultTableModel model = (DefaultTableModel) OrderItemsTable.getModel();
       model.setRowCount(0);

    }//GEN-LAST:event_BackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton Next;
    private javax.swing.JTable OrderItemsTable;
    private javax.swing.JTable SupplierCatalogTable;
    private javax.swing.JComboBox<String> SuppliersComboBox;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JComboBox<String> customerComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField productFrequencyAboveTargetTextField;
    private javax.swing.JTextField productFrequencyBelowTargetTextField;
    private javax.swing.JTextField productNameTextField;
    private javax.swing.JTextField productPricePerformanceTextField;
    private javax.swing.JTextField productRevenueTextField;
    private javax.swing.JTextField salesPersonTextField;
    private javax.swing.JTextField txtCommission;
    // End of variables declaration//GEN-END:variables

    private void updateSupplierCatalog() {
        
          refreshSupplierProductCatalogTable();

        
    }

    private void populateCustomerComboBox() {
        CustomerDirectory customerDirectory = business.getCustomerDirectory();
       ArrayList<CustomerProfile> customerProfiles = customerDirectory.getCustomerList();

    for (CustomerProfile customer : customerProfiles) {
        customerComboBox.addItem(customer.toString()); // Assumes CustomerProfile has a meaningful toString() method
    }
    }

   private void displaySelectedProductSummary(Product selectedProduct) {
    if (selectedProduct == null) {
        // Handle the case where the selected product is null
        JOptionPane.showMessageDialog(null, "No product selected.");
        return;
    }

    // Create an instance of ProductSummary for the selected product
    ProductSummary productSummary = new ProductSummary(selectedProduct, business);

    // Set the product name in the productNameTextField
    productNameTextField.setText(selectedProduct.toString());

    // Retrieve and display the sales revenue in the productRevenueTextField
    String revenues = String.valueOf(productSummary.getSalesRevenues());
    productRevenueTextField.setText(revenues);

    // Retrieve and display the number of sales above target
    productFrequencyAboveTargetTextField.setText(String.valueOf(productSummary.getSalesabovetarget()));

    // Retrieve and display the number of sales below target
    productFrequencyBelowTargetTextField.setText(String.valueOf(productSummary.getSalesbelowtarget()));

    // Retrieve and display the product price performance
    productPricePerformanceTextField.setText(String.valueOf(productSummary.getPriceperformance()));
}


     

}
